{"version":3,"sources":["src/constants.ts","web-build/register-service-worker.js","src/JSError.tsx","src/Loading.tsx","src/Container.tsx","src/screens/Home/HomeScreen.tsx","src/screens/Game/GameScreen.tsx","src/Navigation.tsx","webpack:////home/runner/work/expo-fishbowl/expo-fishbowl/index.js?6aaf","App.tsx","src/navigationConfig.ts"],"names":["LARGE_WIDTH","SMALL_WIDTH","isLargeScreen","width","navigator","window","addEventListener","serviceWorker","register","scope","then","_info","catch","error","console","info","RE_NEWLINE","JSError","props","category","name","message","View","stack","split","map","line","index","key","styles","StyleSheet","create","container","flex","flexGrow","alignItems","justifyContent","Loading","style","animating","size","safeAreaView","flexDirection","wrapper","maxWidth","padding","content","Container","SafeAreaView","children","HomeScreen","promise","onSuccess","Home","onPending","onError","GameScreen","Game","id","route","params","createStackNavigator","Navigator","Screen","Navigation","NavigationContainer","linking","fallback","NavigationStack","initialRouteName","DEFAULT_SCREEN","screenOptions","headerShown","detachInactiveScreens","HOME_SCREEN","component","GAME_SCREEN","registerRootComponent","icons","EvaIconsPack","eva","theme","customTheme","customMapping","StatusBar","prefixes","config","screens"],"mappings":"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","file":"static/js/app.72d30006.chunk.js","sourcesContent":["export const LARGE_WIDTH = 1080;\nexport const SMALL_WIDTH = 640;\n\nexport function isLargeScreen(width: number) {\n  return width >= LARGE_WIDTH;\n}\n\nexport function isSmallScreen(width: number) {\n  return width <= SMALL_WIDTH;\n}\n","/* eslint-env browser */\n\nif (\"serviceWorker\" in navigator) {\n  window.addEventListener(\"load\", function () {\n    navigator.serviceWorker\n      .register(\"/expo-service-worker.js\", {\n        scope: \"/\",\n      })\n      .then(function (_info) {\n        // console.info(\"Registered service-worker\", info);\n      })\n      .catch(function (error) {\n        console.info(\"Failed to register service-worker\", error);\n      });\n  });\n}\n","import React from \"react\";\nimport { Text } from \"@ui-kitten/components\";\nimport { View } from \"react-native\";\n\nconst RE_NEWLINE = /[^\\r\\n]+/g;\n\nexport interface IJSErrorProps {\n  error: Error;\n}\n\nexport function JSError(props: IJSErrorProps) {\n  console.error(props.error);\n\n  return (\n    <>\n      <Text category=\"h1\">{props.error.name}</Text>\n      <Text category=\"h3\">{props.error.message}</Text>\n      <View>\n        {(props.error.stack || \"\").split(RE_NEWLINE).map((line, index) => (\n          <Text key={index}>{line}</Text>\n        ))}\n      </View>\n    </>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Spinner } from \"@ui-kitten/components\";\nimport { EvaSize } from \"@ui-kitten/components/devsupport\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexGrow: 999,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport interface ILoadingProps {\n  size?: EvaSize;\n}\n\nexport function Loading(props: ILoadingProps) {\n  return (\n    <View style={styles.container}>\n      <Spinner animating size={props.size || \"large\"} />\n    </View>\n  );\n}\n","import { SafeAreaView, StyleSheet, View } from \"react-native\";\nimport React, { ReactNode } from \"react\";\nimport { LARGE_WIDTH } from \"./constants\";\nimport { Layout } from \"@ui-kitten/components\";\n\nconst styles = StyleSheet.create({\n  safeAreaView: { flex: 1 },\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n    justifyContent: \"center\",\n  },\n  wrapper: {\n    flex: 1,\n    flexDirection: \"column\",\n    maxWidth: LARGE_WIDTH,\n    padding: 16,\n  },\n  content: {\n    flex: 1,\n  },\n});\n\nexport interface IContainerProps {\n  children: ReactNode;\n}\n\nexport function Container(props: IContainerProps) {\n  return (\n    <SafeAreaView style={styles.safeAreaView}>\n      <Layout style={styles.container}>\n        <View style={styles.wrapper}>\n          <View style={styles.content}>{props.children}</View>\n        </View>\n      </Layout>\n    </SafeAreaView>\n  );\n}\n","import React from \"react\";\nimport { Async } from \"@aicacia/async_component-react\";\nimport { JSError } from \"../../JSError\";\nimport { Loading } from \"../../Loading\";\nimport { Container } from \"../../Container\";\n\nexport function HomeScreen() {\n  return (\n    <Container>\n      <Async\n        promise={import(\"./Home\")}\n        onSuccess={({ Home }) => <Home />}\n        onPending={() => <Loading />}\n        onError={(error) => <JSError error={error} />}\n      />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Async } from \"@aicacia/async_component-react\";\nimport { JSError } from \"../../JSError\";\nimport { Loading } from \"../../Loading\";\nimport { Container } from \"../../Container\";\nimport { GAME_SCREEN, ParamList } from \"../../navigationConfig\";\nimport { RouteProp } from \"@react-navigation/native\";\n\nexport interface IGameScreenProps {\n  route: RouteProp<ParamList, typeof GAME_SCREEN>;\n}\n\nexport function GameScreen(props: IGameScreenProps) {\n  return (\n    <Container>\n      <Async\n        promise={import(\"./Game\")}\n        onSuccess={({ Game }) => <Game id={props.route.params.id} />}\n        onPending={() => <Loading />}\n        onError={(error) => <JSError error={error} />}\n      />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { HomeScreen } from \"./screens/Home/HomeScreen\";\nimport { GameScreen } from \"./screens/Game/GameScreen\";\nimport { Loading } from \"./Loading\";\nimport {\n  DEFAULT_SCREEN,\n  GAME_SCREEN,\n  HOME_SCREEN,\n  linking,\n  ParamList,\n} from \"./navigationConfig\";\n\nexport const { Navigator, Screen } = createStackNavigator<ParamList>();\n\nexport function Navigation() {\n  return (\n    <NavigationContainer linking={linking} fallback={<Loading />}>\n      <NavigationStack />\n    </NavigationContainer>\n  );\n}\n\nfunction NavigationStack() {\n  return (\n    <Navigator\n      initialRouteName={DEFAULT_SCREEN}\n      screenOptions={{\n        headerShown: false,\n      }}\n      detachInactiveScreens\n    >\n      <Screen name={HOME_SCREEN} component={HomeScreen} />\n      <Screen name={GAME_SCREEN} component={GameScreen} />\n    </Navigator>\n  );\n}\n","import { registerRootComponent } from \"expo\";\nimport App from \"./App\";\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import React from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport * as eva from \"@eva-design/eva\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport customTheme from \"./custom-theme.json\";\nimport customMapping from \"./custom-mapping.json\";\nimport { Navigation } from \"./src/Navigation\";\n\nexport default function App() {\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={{ ...eva.light, ...customTheme }}\n        customMapping={customMapping as any}\n      >\n        <StatusBar style=\"auto\" />\n        <Navigation />\n      </ApplicationProvider>\n    </>\n  );\n}\n","export const HOME_SCREEN = \"Home\",\n  GAME_SCREEN = \"Game\",\n  DEFAULT_SCREEN = HOME_SCREEN;\n\nexport type ParamList = {\n  [HOME_SCREEN]: Record<string, unknown>;\n  [GAME_SCREEN]: {\n    id: string;\n  };\n};\n\nexport const linking = {\n  prefixes: [\n    \"https://fishbowl.aicacia.com\",\n    \"fishbowl.aicacia://\",\n    \"https://aicacia.github.io/fishbowl\",\n  ],\n  config: {\n    screens: {\n      [HOME_SCREEN]: \"\",\n      [GAME_SCREEN]: \"game/:id\",\n    },\n  },\n};\n"],"sourceRoot":""}