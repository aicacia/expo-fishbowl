{"version":3,"sources":["src/state/game/definitions.ts","src/state/lib/state.ts","src/peer.ts","src/id.ts","src/state/game/actions.ts","src/state/game/selectors.ts","node_modules/peerjs/dist sync","src/state/index.ts","src/screens/Lobby/Lobby.tsx"],"names":["Peer","Record","name","team","peersFromJSON","json","Object","keys","reduce","peers","id","set","peerFromJSON","Map","Card","text","cardFromJSON","cardsFromJSON","cards","List","map","Game","teams","fromJSON","STORE_NAME","INITIAL_STATE","gameSyncAction","createActionWithPayload","gameSetNameAction","gameSetTeamAction","gameSetTeamNameAction","state","State","gameName","game","gameFromJSON","useMapStateToProps","createConnect","createHook","APP_PEER_ID","none","PEER","emitter","EventEmitter","getPeer","Promise","resolve","ifSome","ifNone","once","usePeer","useState","toJS","peer","setPeer","useEffect","then","a","async","getAppId","getId","appPeerId","create","PeerJS","on","error","console","replace","emit","init","CHARS","PREFIX","randomId","size","range","iter","charAt","Math","floor","random","length","toArray","join","getIdFromAppId","appId","substring","AsyncStorage","getItem","setItem","store","getStore","updatePeer","updater","update","get","setStatePeerName","setStatePeerTeam","setStateTeamName","setStatePeers","merge","gameSetTeamName","debounce","setTeamName","broadcast","gameSetPeerName","setPeerName","gameSetPeerTeam","setPeerTeam","reducer","action","is","payload","selectPeers","selectTeams","send","getCurrent","webpackEmptyContext","req","e","Error","code","module","exports","dispatch","createDispatcher","mergeReducers","Lobby","props","myPeer","setName","teamNames","setTeamNames","navigation","useNavigation","team1","filter","toList","team2","useMemo","connect","onStart","message","type","navigate","GAME_SCREEN","off","createOnSetTeamName","useCallback","onSetName","createOnSetTeam","label","value","onChangeText","checked","onChange","toSeq","key","valueSeq","disabled","isEmpty","onPress"],"mappings":"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","file":"static/js/6.3829b6c8.chunk.js","sourcesContent":["import { IJSONObject } from \"@aicacia/json\";\nimport { createActionWithPayload } from \"@aicacia/state\";\nimport { Map, List, Record, RecordOf } from \"immutable\";\n\nexport interface IPeer {\n  name: string;\n  team: number;\n}\n\nexport const Peer = Record<IPeer>({\n  name: \"\",\n  team: 0,\n});\n\nexport function peerFromJSON(json: IJSONObject): RecordOf<IPeer> {\n  return Peer({\n    name: json.name as string,\n    team: json.team as number,\n  });\n}\n\nexport function peersFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (peers, id) => peers.set(id, peerFromJSON(json[id] as IJSONObject)),\n    Map<string, RecordOf<IPeer>>()\n  );\n}\n\nexport interface ICard {\n  text: string;\n}\n\nexport const Card = Record<ICard>({\n  text: \"\",\n});\n\nexport function cardFromJSON(json: IJSONObject): RecordOf<ICard> {\n  return Card({\n    text: json.text as string,\n  });\n}\n\nexport function cardsFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (cards, id) =>\n      cards.set(id, List((json[id] as Array<IJSONObject>).map(cardFromJSON))),\n    Map<string, List<RecordOf<ICard>>>()\n  );\n}\n\nexport interface IGame {\n  peers: Map<string, RecordOf<IPeer>>;\n  teams: List<string>;\n  cards: Map<string, List<RecordOf<ICard>>>;\n}\n\nexport const Game = Record<IGame>({\n  peers: Map(),\n  teams: List([\"Team 1\", \"Team 2\"]),\n  cards: Map(),\n});\n\nexport function fromJSON(json: IJSONObject): RecordOf<IGame> {\n  return Game({\n    peers: peersFromJSON(json.peers as IJSONObject),\n    teams: List(json.teams as Array<string>),\n    cards: cardsFromJSON(json.cards as IJSONObject),\n  });\n}\n\nexport const STORE_NAME = \"game\";\nexport const INITIAL_STATE = Game();\n\nexport const gameSyncAction = createActionWithPayload<{\n  peers: {\n    [key: string]: IPeer;\n  };\n  cards: {\n    [key: string]: Array<ICard>;\n  };\n}>(`${STORE_NAME}.sync`);\nexport const gameSetNameAction = createActionWithPayload<{\n  id: string;\n  name: string;\n}>(`${STORE_NAME}.set-name`);\nexport const gameSetTeamAction = createActionWithPayload<{\n  id: string;\n  team: number;\n}>(`${STORE_NAME}.set-team`);\nexport const gameSetTeamNameAction = createActionWithPayload<{\n  team: number;\n  name: string;\n}>(`${STORE_NAME}.set-team-name`);\n","import { initReduxDevTools, IStateTypeOf, State } from \"@aicacia/state\";\nimport { createHook, createConnect } from \"@aicacia/state-react\";\nimport {\n  fromJSON as gameFromJSON,\n  INITIAL_STATE as game,\n  STORE_NAME as gameName,\n} from \"../game/definitions\";\n\nexport const state = new State(\n  {\n    [gameName]: game,\n  },\n  {\n    [gameName]: gameFromJSON,\n  }\n);\nexport type IState = IStateTypeOf<typeof state>;\n\nexport const connect = createConnect(state);\n\nexport const useMapStateToProps = createHook(state);\n\nif (process.env.NODE_ENV !== \"production\") {\n  initReduxDevTools(state);\n}\n","import { none, Option } from \"@aicacia/core\";\nimport { Peer } from \"@aicacia/peer\";\nimport { useEffect, useState } from \"react\";\nimport { EventEmitter } from \"events\";\nimport PeerJS from \"peerjs\";\nimport { getId, getAppId } from \"./id\";\n\nexport const APP_PEER_ID: Option<string> = none(),\n  PEER: Option<Peer> = none();\n\nconst emitter = new EventEmitter();\n\nexport function getPeerId() {\n  return new Promise<string>((resolve) =>\n    APP_PEER_ID.ifSome(resolve).ifNone(() => emitter.once(\"peer-id\", resolve))\n  );\n}\n\nexport function getPeer() {\n  return new Promise<Peer>((resolve) =>\n    PEER.ifSome(resolve).ifNone(() => emitter.once(\"peer\", resolve))\n  );\n}\n\nexport function usePeer() {\n  const [peer, setPeer] = useState(PEER.toJS());\n\n  useEffect(() => {\n    if (peer === null) {\n      getPeer().then(setPeer);\n    }\n  }, [peer]);\n\n  return peer;\n}\n\nexport function usePeerId() {\n  const [peerId, setPeerId] = useState(APP_PEER_ID.toJS());\n\n  useEffect(() => {\n    if (peerId === null) {\n      getPeerId().then(setPeerId);\n    }\n  }, [peerId]);\n\n  return peerId;\n}\n\nasync function init() {\n  const appPeerId = getAppId(await getId()),\n    peer = await Peer.create(new PeerJS(appPeerId));\n\n  peer.on(\"error\", (error) => {\n    console.error(error);\n  });\n\n  APP_PEER_ID.replace(appPeerId);\n  PEER.replace(peer);\n\n  emitter.emit(\"peer-id\", appPeerId);\n  emitter.emit(\"peer\", peer);\n}\n\ninit();\n","import { range } from \"@aicacia/core\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst ID_KEY = \"ID\",\n  CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  PREFIX = \"fishbowl-aicacia-com-\";\n\nfunction randomId(size = 6) {\n  return range(0, size)\n    .iter()\n    .map(() => CHARS.charAt(Math.floor(Math.random() * CHARS.length)))\n    .toArray()\n    .join(\"\");\n}\n\nexport function getAppId(id: string) {\n  return PREFIX + id;\n}\n\nexport function getIdFromAppId(appId: string) {\n  return appId.substring(PREFIX.length);\n}\n\nexport async function getId(size = 6) {\n  let id = await AsyncStorage.getItem(ID_KEY);\n\n  if (id) {\n    return id;\n  } else {\n    id = randomId(size);\n    await AsyncStorage.setItem(ID_KEY, id);\n    return id;\n  }\n}\n","import {\n  gameSetNameAction,\n  gameSetTeamAction,\n  gameSetTeamNameAction,\n  gameSyncAction,\n  IGame,\n  IPeer,\n  Peer,\n  peersFromJSON,\n  STORE_NAME,\n} from \"./definitions\";\nimport { state } from \"../lib/state\";\nimport { getPeer } from \"../../peer\";\nimport { debounce } from \"@aicacia/debounce\";\nimport { Map, RecordOf } from \"immutable\";\nimport { IAction } from \"@aicacia/state\";\n\nexport const store = state.getStore(STORE_NAME);\n\nfunction updatePeer(\n  state: RecordOf<IGame>,\n  id: string,\n  updater: (peer: RecordOf<IPeer>) => RecordOf<IPeer>\n) {\n  return state.update(\"peers\", (peers) => {\n    const peer = peers.get(id, Peer());\n    return peers.set(id, updater(peer));\n  });\n}\n\nfunction setStatePeerName(state: RecordOf<IGame>, id: string, name: string) {\n  return updatePeer(state, id, (peer) => peer.set(\"name\", name));\n}\n\nexport function setPeerName(id: string, name: string) {\n  store.update((state) => setStatePeerName(state, id, name));\n}\n\nfunction setStatePeerTeam(state: RecordOf<IGame>, id: string, team: number) {\n  return updatePeer(state, id, (peer) => peer.set(\"team\", team));\n}\n\nexport function setPeerTeam(id: string, team: number) {\n  store.update((state) => setStatePeerTeam(state, id, team));\n}\n\nfunction setStateTeamName(state: RecordOf<IGame>, team: number, name: string) {\n  return state.update(\"teams\", (teams) => teams.set(team, name));\n}\n\nexport function setTeamName(team: number, name: string) {\n  store.update((state) => setStateTeamName(state, team, name));\n}\n\nfunction setStatePeers(\n  state: RecordOf<IGame>,\n  peers: Map<string, RecordOf<IPeer>>\n) {\n  return state.update(\"peers\", (state) => state.merge(peers));\n}\n\nexport function setPeers(peers: Map<string, RecordOf<IPeer>>) {\n  store.update((state) => setStatePeers(state, peers));\n}\n\nexport const gameSetTeamName = debounce((team: number, name: string) => {\n  setTeamName(team, name);\n  getPeer().then((peer) =>\n    peer.broadcast(gameSetTeamNameAction.create({ team, name }))\n  );\n}, 500);\n\nexport const gameSetPeerName = debounce((id: string, name: string) => {\n  setPeerName(id, name);\n  getPeer().then((peer) =>\n    peer.broadcast(gameSetNameAction.create({ id, name }))\n  );\n}, 500);\n\nexport function gameSetPeerTeam(id: string, team: number) {\n  setPeerTeam(id, team);\n  getPeer().then((peer) =>\n    peer.broadcast(gameSetTeamAction.create({ id, team }))\n  );\n}\n\nexport function reducer(\n  state: RecordOf<IGame>,\n  action: IAction\n): RecordOf<IGame> {\n  if (gameSetNameAction.is(action)) {\n    return setStatePeerName(state, action.payload.id, action.payload.name);\n  } else if (gameSetTeamAction.is(action)) {\n    return setStatePeerTeam(state, action.payload.id, action.payload.team);\n  } else if (gameSetTeamNameAction.is(action)) {\n    return setStateTeamName(state, action.payload.team, action.payload.name);\n  } else if (gameSyncAction.is(action)) {\n    return setStatePeers(state, peersFromJSON(action.payload.peers as any));\n  } else {\n    return state;\n  }\n}\n\ngetPeer().then((peer) => {\n  peer.on(\"connection\", (id) => {\n    peer.send(id, gameSyncAction.create(store.getCurrent().toJS()));\n  });\n});\n","import { Map, RecordOf, List } from \"immutable\";\nimport { IState } from \"../lib/state\";\nimport { IPeer, Peer, STORE_NAME } from \"./definitions\";\n\nexport function selectPeers(state: IState): Map<string, RecordOf<IPeer>> {\n  return state[STORE_NAME].peers;\n}\n\nexport function selectPeer(state: IState, id: string): RecordOf<IPeer> {\n  return state[STORE_NAME].peers.get(id, Peer());\n}\n\nexport function selectTeams(state: IState): List<string> {\n  return state[STORE_NAME].teams;\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 919;","import { createDispatcher, mergeReducers } from \"@aicacia/state\";\nimport { getPeer } from \"../peer\";\nimport * as game from \"./game\";\nimport { state, useMapStateToProps, connect } from \"./lib/state\";\nexport type { IState } from \"./lib/state\";\n\nexport const dispatch = createDispatcher(\n  state,\n  mergeReducers({\n    [game.STORE_NAME]: game.reducer,\n  })\n);\n\ngetPeer().then((peer) => {\n  peer.on(\"message\", dispatch);\n});\n\nexport { state, useMapStateToProps, connect };\nexport { game };\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Button, CheckBox, Divider, Input, Text } from \"@ui-kitten/components\";\nimport { GAME_SCREEN, ParamList } from \"../../navigationConfig\";\nimport { usePeer } from \"../../peer\";\nimport { useMapStateToProps } from \"../../state\";\nimport {\n  gameSetPeerName,\n  gameSetPeerTeam,\n  gameSetTeamName,\n  Peer,\n  selectPeers,\n  selectTeams,\n} from \"../../state/game\";\nimport { getAppId, getIdFromAppId } from \"../../id\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nexport function Lobby(props: ParamList[typeof GAME_SCREEN]) {\n  const peer = usePeer(),\n    peers = useMapStateToProps(selectPeers),\n    teams = useMapStateToProps(selectTeams),\n    myPeer = peers.get(peer ? peer.getId() : \"\", Peer()),\n    [name, setName] = useState(myPeer.name),\n    [teamNames, setTeamNames] = useState(teams),\n    navigation = useNavigation(),\n    team1 = peers.filter((peer) => peer.team === 0).toList(),\n    team2 = peers.filter((peer) => peer.team === 1).toList();\n\n  useMemo(() => setTeamNames(teams), [teams]);\n\n  useMemo(async () => {\n    const appPeerId = getAppId(props.id);\n\n    if (peer) {\n      if (appPeerId !== peer.getId()) {\n        try {\n          await peer.connect(appPeerId);\n        } catch (_) {}\n\n        const onStart = (message: any) => {\n          if (message.type === \"start\") {\n            navigation.navigate(GAME_SCREEN, { id: props.id });\n            peer.off(\"message\", onStart);\n          }\n        };\n        peer.on(\"message\", onStart);\n      }\n      gameSetPeerName(peer.getId(), getIdFromAppId(peer.getId()));\n    }\n  }, [peer, props.id]);\n\n  const createOnSetTeamName = useCallback(\n    (team: number) => (name: string) => {\n      if (peer) {\n        gameSetTeamName(team, name);\n        setTeamNames((teamNames) => teamNames.set(team, name));\n      }\n    },\n    [peer]\n  );\n\n  const onSetName = useCallback(\n    (name: string) => {\n      if (peer) {\n        gameSetPeerName(peer.getId(), name);\n        setName(name);\n      }\n    },\n    [peer]\n  );\n\n  const createOnSetTeam = useCallback(\n    (team: number) => () => {\n      if (peer) {\n        gameSetPeerTeam(peer.getId(), team);\n      }\n    },\n    [peer]\n  );\n\n  const onStart = useCallback(() => {\n    if (peer) {\n      peer.broadcast({\n        type: \"start\",\n      });\n      navigation.navigate(GAME_SCREEN, { id: props.id });\n    }\n  }, [peer, props.id]);\n\n  return (\n    <View>\n      <Input label=\"Your Name\" value={name} onChangeText={onSetName} />\n      <Input\n        label=\"Team 1 Name\"\n        value={teamNames.get(0, \"\")}\n        onChangeText={createOnSetTeamName(0)}\n      />\n      <Input\n        label=\"Team 2 Name\"\n        value={teamNames.get(1, \"\")}\n        onChangeText={createOnSetTeamName(1)}\n      />\n      <Divider />\n      <CheckBox checked={myPeer.team == 0} onChange={createOnSetTeam(0)}>\n        {(myPeer.team == 1 ? \"Join \" : \"\") + teamNames.get(0, \"\")}\n      </CheckBox>\n      {team1\n        .toSeq()\n        .map((peer, id) => <Text key={id}>{peer.name}</Text>)\n        .valueSeq()}\n      <CheckBox checked={myPeer.team == 1} onChange={createOnSetTeam(1)}>\n        {(myPeer.team == 0 ? \"Join \" : \"\") + teamNames.get(1, \"\")}\n      </CheckBox>\n      {team2\n        .toSeq()\n        .map((peer, id) => <Text key={id}>{peer.name}</Text>)\n        .valueSeq()}\n      <Button disabled={team1.isEmpty() || team2.isEmpty()} onPress={onStart}>\n        Start\n      </Button>\n    </View>\n  );\n}\n"],"sourceRoot":""}