{"version":3,"sources":["src/peer.ts","src/id.ts","node_modules/peerjs/dist sync","src/state/game/definitions.ts","src/state/lib/state.ts","src/state/game/actions.ts","src/state/game/selectors.ts","src/screens/Game/Cards.tsx","src/CastButton.web.tsx","src/screens/Game/Lobby.tsx","src/screens/Game/Playing.tsx","src/QRCode.tsx","src/screens/Game/Game.tsx"],"names":["APP_PEER_ID","none","PEER","emitter","EventEmitter","getPeer","Promise","resolve","ifSome","ifNone","once","usePeer","useState","toJS","peer","setPeer","useEffect","then","usePeerId","peerId","setPeerId","a","async","getAppId","getId","appPeerId","Peer","create","PeerJS","on","error","console","replace","emit","init","CHARS","PREFIX","randomId","size","range","iter","map","charAt","Math","floor","random","length","toArray","join","id","getIdFromAppId","appId","substring","AsyncStorage","getItem","setItem","webpackEmptyContext","req","e","Error","code","keys","module","exports","Record","name","team","doneWithCards","peersFromJSON","json","Object","reduce","peers","set","peerFromJSON","Map","GameState","Card","text","cardsFromJSON","peersCards","peerCardsJSON","cards","idx","cardFromJSON","teamsFromJSON","teams","Game","state","Cards","0","1","fromJSON","INITIAL_STATE","syncAction","createActionWithPayload","STORE_NAME","setStateAction","setNameAction","setTeamAction","setTeamNameAction","setCardTextAction","setDoneWithCardsAction","updatePeer","updater","update","get","State","game","gameFromJSON","useMapStateToProps","createConnect","createHook","dispatch","createDispatcher","mergeReducers","action","is","payload","syncState","mergeDeep","index","peerCards","peerCard","updateCard","card","setGameState","broadcastAndDispatch","setTeamName","debounce","setPeerName","setCardText","broadcast","selectState","selectPeers","selectTeams","selectEveryoneDoneWithCards","valueSeq","send","from","getCurrent","memo","selectDoneWithCards","selectPeerCards","toList","cardTexts","setCardTexts","useMemo","createOnSetCardTexts","onAddCard","useCallback","push","onDoneWithCards","setDoneWithCards","View","key","label","value","onChangeText","onPress","disabled","CastButton","props","injectGoogleCast","window","__onGCastApiAvailable","available","reason","cast","framework","CastContext","getInstance","setOptions","receiverApplicationId","autoJoinPolicy","chrome","AutoJoinPolicy","ORIGIN_SCOPED","script","document","createElement","src","body","appendChild","Lobby","peerState","setName","teamNames","setTeamNames","team1","filter","team2","createOnSetTeamName","onSetName","createOnSetTeam","setPeerTeam","onStart","checked","onChange","toSeq","isEmpty","Playing","QRCode","dataURL","setDataURL","toDataURL","uri","width","height","Image","source","style","styles","StyleSheet","qrcode","flex","alignItems","castButton","position","right","top","everyoneDoneWithCards","gameState","windowDimensions","useWindowDimensions","connect","_","makeUrl","isLargeScreen","SMALL_WIDTH"],"mappings":"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","file":"static/js/5.7eaaed8a.chunk.js","sourcesContent":["import { none, Option } from \"@aicacia/core\";\nimport { Peer } from \"@aicacia/peer\";\nimport { useEffect, useState } from \"react\";\nimport { EventEmitter } from \"events\";\nimport PeerJS from \"peerjs\";\nimport { getId, getAppId } from \"./id\";\n\nexport const APP_PEER_ID: Option<string> = none(),\n  PEER: Option<Peer> = none();\n\nconst emitter = new EventEmitter();\n\nexport function getPeerId() {\n  return new Promise<string>((resolve) =>\n    APP_PEER_ID.ifSome(resolve).ifNone(() => emitter.once(\"peer-id\", resolve))\n  );\n}\n\nexport function getPeer() {\n  return new Promise<Peer>((resolve) =>\n    PEER.ifSome(resolve).ifNone(() => emitter.once(\"peer\", resolve))\n  );\n}\n\nexport function usePeer() {\n  const [peer, setPeer] = useState(PEER.toJS());\n\n  useEffect(() => {\n    if (peer === null) {\n      getPeer().then(setPeer);\n    }\n  }, [peer]);\n\n  return peer;\n}\n\nexport function usePeerId() {\n  const [peerId, setPeerId] = useState(APP_PEER_ID.toJS());\n\n  useEffect(() => {\n    if (peerId === null) {\n      getPeerId().then(setPeerId);\n    }\n  }, [peerId]);\n\n  return peerId;\n}\n\nasync function init() {\n  const appPeerId = getAppId(await getId()),\n    peer = await Peer.create(new PeerJS(appPeerId));\n\n  peer.on(\"error\", (error) => {\n    console.error(error);\n  });\n\n  APP_PEER_ID.replace(appPeerId);\n  PEER.replace(peer);\n\n  emitter.emit(\"peer-id\", appPeerId);\n  emitter.emit(\"peer\", peer);\n}\n\ninit();\n","import { range } from \"@aicacia/core\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst ID_KEY = \"ID\",\n  CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  PREFIX = \"fishbowl-aicacia-com-\";\n\nfunction randomId(size = 6) {\n  return range(0, size)\n    .iter()\n    .map(() => CHARS.charAt(Math.floor(Math.random() * CHARS.length)))\n    .toArray()\n    .join(\"\");\n}\n\nexport function getAppId(id: string) {\n  return PREFIX + id;\n}\n\nexport function getIdFromAppId(appId: string) {\n  return appId.substring(PREFIX.length);\n}\n\nexport async function getId(size = 6) {\n  let id = await AsyncStorage.getItem(ID_KEY);\n\n  if (id) {\n    return id;\n  } else {\n    id = randomId(size);\n    await AsyncStorage.setItem(ID_KEY, id);\n    return id;\n  }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 925;","import { IJSONObject } from \"@aicacia/json\";\nimport { createActionWithPayload, IAction } from \"@aicacia/state\";\nimport { Map, Record, RecordOf } from \"immutable\";\n\nexport interface IPeer {\n  name: string;\n  team: number;\n  doneWithCards: boolean;\n}\n\nexport const Peer = Record<IPeer>({\n  name: \"\",\n  team: 0,\n  doneWithCards: false,\n});\n\nexport function peerFromJSON(json: IJSONObject): RecordOf<IPeer> {\n  return Peer({\n    name: json.name as string,\n    team: json.team as number,\n  });\n}\n\nexport function peersFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (peers, id) => peers.set(id, peerFromJSON(json[id] as IJSONObject)),\n    Map<string, RecordOf<IPeer>>()\n  );\n}\n\nexport interface ICard {\n  text: string;\n}\n\nexport const Card = Record<ICard>({\n  text: \"\",\n});\n\nexport function cardFromJSON(json: IJSONObject): RecordOf<ICard> {\n  return Card({\n    text: json.text as string,\n  });\n}\n\nexport function cardsFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce((peersCards, id) => {\n    const peerCardsJSON = json[id] as IJSONObject;\n    return peersCards.set(\n      id,\n      Object.keys(peerCardsJSON).reduce(\n        (cards, idx) =>\n          cards.set(+idx, cardFromJSON(peerCardsJSON[idx] as IJSONObject)),\n        Map<number, RecordOf<ICard>>()\n      )\n    );\n  }, Map<string, Map<number, RecordOf<ICard>>>());\n}\n\nexport function teamsFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (teams, team) => teams.set(+team, json[team] as string),\n    Map<number, string>()\n  );\n}\n\nexport enum GameState {\n  Lobby,\n  Cards,\n  Playing,\n  Done,\n}\n\nexport interface IGame {\n  state: GameState;\n  peers: Map<string, RecordOf<IPeer>>;\n  teams: Map<number, string>;\n  cards: Map<string, Map<number, RecordOf<ICard>>>;\n}\n\nexport const Game = Record<IGame>({\n  state: GameState.Cards,\n  peers: Map(),\n  teams: teamsFromJSON({ 0: \"Team 1\", 1: \"Team 2\" }),\n  cards: Map(),\n});\n\nexport function fromJSON(json: IJSONObject): RecordOf<IGame> {\n  return Game({\n    state: json.state as GameState,\n    peers: peersFromJSON(json.peers as IJSONObject),\n    teams: teamsFromJSON(json.teams as IJSONObject),\n    cards: cardsFromJSON(json.cards as IJSONObject),\n  });\n}\n\nexport const STORE_NAME = \"game\";\nexport const INITIAL_STATE = Game();\n\nexport const syncAction = createActionWithPayload<{\n  from: string;\n  state: IJSONObject;\n}>(`${STORE_NAME}.sync`);\n\nexport const setStateAction = createActionWithPayload<GameState>(\n  `${STORE_NAME}.set-state`\n);\n\nexport const setNameAction = createActionWithPayload<{\n  id: string;\n  name: string;\n}>(`${STORE_NAME}.set-name`);\n\nexport const setTeamAction = createActionWithPayload<{\n  id: string;\n  team: number;\n}>(`${STORE_NAME}.set-team`);\n\nexport const setTeamNameAction = createActionWithPayload<{\n  team: number;\n  name: string;\n}>(`${STORE_NAME}.set-team-name`);\n\nexport const setCardTextAction = createActionWithPayload<{\n  peerId: string;\n  index: number;\n  text: string;\n}>(`${STORE_NAME}.set-card-text`);\n\nexport const setDoneWithCardsAction = createActionWithPayload<{\n  peerId: string;\n  doneWithCards: boolean;\n}>(`${STORE_NAME}.set-done-with-cards`);\n\nfunction updatePeer(\n  state: RecordOf<IGame>,\n  id: string,\n  updater: (peer: RecordOf<IPeer>) => RecordOf<IPeer>\n) {\n  return state.update(\"peers\", (peers) =>\n    peers.set(id, updater(peers.get(id) || Peer()))\n  );\n}\n\nfunction updateCard(\n  state: RecordOf<IGame>,\n  peerId: string,\n  index: number,\n  updater: (peer: RecordOf<ICard>) => RecordOf<ICard>\n) {\n  return state.update(\"cards\", (cards) => {\n    const peerCards = cards.get(peerId, Map<number, RecordOf<ICard>>()),\n      peerCard = peerCards.get(index, Card());\n\n    return cards.set(peerId, peerCards.set(index, updater(peerCard)));\n  });\n}\n\nexport function reducer(\n  state: RecordOf<IGame>,\n  action: IAction\n): RecordOf<IGame> {\n  if (setNameAction.is(action)) {\n    return updatePeer(state, action.payload.id, (peer) =>\n      peer.set(\"name\", action.payload.name)\n    );\n  } else if (setTeamAction.is(action)) {\n    return updatePeer(state, action.payload.id, (peer) =>\n      peer.set(\"team\", action.payload.team)\n    );\n  } else if (setTeamNameAction.is(action)) {\n    return state.update(\"teams\", (teams) =>\n      teams.set(action.payload.team, action.payload.name)\n    );\n  } else if (syncAction.is(action)) {\n    const syncState = fromJSON(action.payload.state);\n\n    if (syncState.peers.size > state.peers.size) {\n      return state.mergeDeep(syncState);\n    } else {\n      return syncState.mergeDeep(state);\n    }\n  } else if (setStateAction.is(action)) {\n    return state.set(\"state\", action.payload);\n  } else if (setCardTextAction.is(action)) {\n    return updateCard(\n      state,\n      action.payload.peerId,\n      action.payload.index,\n      (card) => card.set(\"text\", action.payload.text)\n    );\n  } else if (setDoneWithCardsAction.is(action)) {\n    return updatePeer(state, action.payload.peerId, (peer) =>\n      peer.set(\"doneWithCards\", action.payload.doneWithCards)\n    );\n  } else {\n    return state;\n  }\n}\n","import {\n  initReduxDevTools,\n  IStateTypeOf,\n  State,\n  createDispatcher,\n  mergeReducers,\n} from \"@aicacia/state\";\nimport { createHook, createConnect } from \"@aicacia/state-react\";\nimport {\n  fromJSON as gameFromJSON,\n  INITIAL_STATE as game,\n  STORE_NAME as gameName,\n  reducer as gameReducer,\n} from \"../game/definitions\";\nimport { getPeer } from \"../../peer\";\n\nexport const state = new State(\n  {\n    [gameName]: game,\n  },\n  {\n    [gameName]: gameFromJSON,\n  }\n);\nexport type IState = IStateTypeOf<typeof state>;\n\nexport const connect = createConnect(state);\n\nexport const useMapStateToProps = createHook(state);\n\nexport const dispatch = createDispatcher(\n  state,\n  mergeReducers({\n    [gameName]: gameReducer,\n  })\n);\n\ngetPeer().then((peer) => {\n  peer.on(\"message\", dispatch);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  initReduxDevTools(state);\n}\n","import {\n  setNameAction,\n  setTeamAction,\n  setTeamNameAction,\n  setStateAction,\n  setDoneWithCardsAction,\n  syncAction,\n  GameState,\n  setCardTextAction,\n} from \"./definitions\";\nimport { dispatch, state } from \"../lib/state\";\nimport { getPeer } from \"../../peer\";\nimport { debounce } from \"@aicacia/debounce\";\nimport { getIdFromAppId } from \"../../id\";\nimport { IAction } from \"@aicacia/state\";\n\nexport function setGameState(state: GameState) {\n  const action = setStateAction.create(state);\n  broadcastAndDispatch(action);\n}\n\nexport const setTeamName = debounce((team: number, name: string) => {\n  const action = setTeamNameAction.create({ team, name });\n  broadcastAndDispatch(action);\n}, 1000);\n\nexport const setPeerName = debounce((id: string, name: string) => {\n  const action = setNameAction.create({ id, name });\n  broadcastAndDispatch(action);\n}, 1000);\n\nexport function setPeerTeam(id: string, team: number) {\n  const action = setTeamAction.create({ id, team });\n  broadcastAndDispatch(action);\n}\n\nexport const setCardText = debounce(\n  (peerId: string, index: number, text: string) => {\n    const action = setCardTextAction.create({ peerId, index, text });\n    broadcastAndDispatch(action);\n  },\n  1000\n);\n\nexport function setDoneWithCards(peerId: string, doneWithCards: boolean) {\n  const action = setDoneWithCardsAction.create({ peerId, doneWithCards });\n  broadcastAndDispatch(action);\n}\n\nfunction broadcastAndDispatch(action: IAction) {\n  dispatch(action);\n  getPeer().then((peer) => peer.broadcast(action));\n}\n\ngetPeer().then((peer) => {\n  setPeerName(peer.getId(), getIdFromAppId(peer.getId()));\n\n  peer.on(\"connection\", (id) => {\n    peer.send(\n      id,\n      syncAction.create({\n        from: peer.getId(),\n        state: state.getCurrent().game.toJS() as any,\n      })\n    );\n  });\n});\n","import { Map, List, RecordOf } from \"immutable\";\nimport { IState } from \"../lib/state\";\nimport { IPeer, Peer, GameState, STORE_NAME, ICard } from \"./definitions\";\n\nexport function selectState(state: IState): GameState {\n  return state[STORE_NAME].state;\n}\n\nexport function selectPeers(state: IState): Map<string, RecordOf<IPeer>> {\n  return state[STORE_NAME].peers;\n}\n\nexport function selectPeer(state: IState, id: string): RecordOf<IPeer> {\n  return state[STORE_NAME].peers.get(id, Peer());\n}\n\nexport function selectTeams(state: IState): Map<number, string> {\n  return state[STORE_NAME].teams;\n}\n\nexport function selectPeerCards(\n  state: IState,\n  id: string\n): Map<number, RecordOf<ICard>> {\n  return state[STORE_NAME].cards.get(id, Map());\n}\n\nexport function selectCards(state: IState): List<RecordOf<ICard>> {\n  return state[STORE_NAME].cards.reduce(\n    (cards, peerCards) => cards.merge(peerCards.toList()),\n    List()\n  );\n}\n\nexport function selectDoneWithCards(state: IState, peerId: string): boolean {\n  return state[STORE_NAME].peers.get(peerId, Peer()).doneWithCards;\n}\n\nexport function selectEveryoneDoneWithCards(state: IState): boolean {\n  const peers = state[STORE_NAME].peers.valueSeq().toArray();\n\n  if (!peers.length) {\n    return false;\n  }\n\n  for (const peer of peers) {\n    if (!peer.doneWithCards) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { Button, Input } from \"@ui-kitten/components\";\nimport React, { memo, useCallback, useMemo, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { usePeerId } from \"../../peer\";\nimport { useMapStateToProps } from \"../../state\";\nimport {\n  selectDoneWithCards,\n  selectPeerCards,\n  setCardText,\n  setDoneWithCards,\n} from \"../../state/game\";\n\nexport const Cards = memo(() => {\n  const peerId = usePeerId(),\n    doneWithCards = useMapStateToProps((state) =>\n      selectDoneWithCards(state, peerId || \"\")\n    ),\n    cards = useMapStateToProps((state) => selectPeerCards(state, peerId || \"\")),\n    [cardTexts, setCardTexts] = useState(() =>\n      cards.map((card) => card.text).toList()\n    );\n\n  useMemo(\n    () =>\n      setCardTexts((cardTexts) =>\n        cards.reduce(\n          (cardTexts, card, index) => cardTexts.set(index, card.text),\n          cardTexts\n        )\n      ),\n    [cards]\n  );\n\n  const createOnSetCardTexts = (index: number) => (text: string) => {\n    if (peerId) {\n      setCardText(peerId, index, text);\n    }\n    setCardTexts((cardTexts) => cardTexts.set(index, text));\n  };\n\n  const onAddCard = useCallback(\n    () => setCardTexts((cardTexts) => cardTexts.push(\"\")),\n    []\n  );\n\n  const onDoneWithCards = useCallback(\n    () => peerId && setDoneWithCards(peerId, true),\n    [peerId]\n  );\n\n  return (\n    <View>\n      {cardTexts.valueSeq().map((text, index) => (\n        <Input\n          key={index}\n          label={`Card ${index + 1}`}\n          value={text}\n          onChangeText={createOnSetCardTexts(index)}\n        />\n      ))}\n      <Button onPress={onAddCard}>Add</Button>\n      <Button\n        disabled={doneWithCards || cards.size < 3}\n        onPress={onDoneWithCards}\n      >\n        Ready\n      </Button>\n    </View>\n  );\n});\n","import React from \"react\";\nimport once from \"once\";\nimport { View } from \"react-native\";\nimport { Props } from \"react-native-google-cast/lib/typescript/src/components/CastButton\";\nimport { receiverApplicationId } from \"../app.json\";\n\nexport default function CastButton(props: Props) {\n  const GoogleCastLancher: any = \"google-cast-launcher\";\n\n  injectGoogleCast();\n\n  return (\n    <View {...props}>\n      <GoogleCastLancher />\n    </View>\n  );\n}\n\nconst injectGoogleCast = once(() => {\n  const onGCastApiAvailable = (available: boolean, reason: string) => {\n    if (available) {\n      cast.framework.CastContext.getInstance().setOptions({\n        receiverApplicationId,\n        autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n      });\n    } else {\n      console.error(reason);\n    }\n  };\n\n  window.__onGCastApiAvailable = onGCastApiAvailable as (\n    available: boolean\n  ) => void;\n\n  const script = document.createElement(\"script\");\n  script.src =\n    \"//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n  document.body.appendChild(script);\n});\n","import React, { memo, useCallback, useMemo, useState } from \"react\";\nimport { Button, CheckBox, Divider, Input, Text } from \"@ui-kitten/components\";\nimport { usePeer } from \"../../peer\";\nimport { useMapStateToProps } from \"../../state\";\nimport {\n  setPeerName,\n  setPeerTeam,\n  setTeamName,\n  setGameState,\n  Peer,\n  selectPeers,\n  selectTeams,\n  GameState,\n} from \"../../state/game\";\n\nexport const Lobby = memo(() => {\n  const peer = usePeer(),\n    peers = useMapStateToProps(selectPeers),\n    teams = useMapStateToProps(selectTeams),\n    peerState = peers.get(peer ? peer.getId() : \"\", Peer()),\n    [name, setName] = useState(peerState.name),\n    [teamNames, setTeamNames] = useState(teams),\n    team1 = peers.filter((peer) => peer.team === 0).toList(),\n    team2 = peers.filter((peer) => peer.team === 1).toList();\n\n  useMemo(() => setTeamNames(teams), [teams]);\n\n  const createOnSetTeamName = useCallback(\n    (team: number) => (name: string) => {\n      if (peer) {\n        setTeamName(team, name);\n        setTeamNames((teamNames) => teamNames.set(team, name));\n      }\n    },\n    [peer]\n  );\n\n  const onSetName = useCallback(\n    (name: string) => {\n      if (peer) {\n        setPeerName(peer.getId(), name);\n        setName(name);\n      }\n    },\n    [peer]\n  );\n\n  const createOnSetTeam = useCallback(\n    (team: number) => () => {\n      if (peer) {\n        setPeerTeam(peer.getId(), team);\n      }\n    },\n    [peer]\n  );\n\n  const onStart = useCallback(() => setGameState(GameState.Cards), []);\n\n  return (\n    <>\n      <Input label=\"Your Name\" value={name} onChangeText={onSetName} />\n      <Input\n        label=\"Team 1 Name\"\n        value={teamNames.get(0, \"\")}\n        onChangeText={createOnSetTeamName(0)}\n      />\n      <Input\n        label=\"Team 2 Name\"\n        value={teamNames.get(1, \"\")}\n        onChangeText={createOnSetTeamName(1)}\n      />\n      <Divider />\n      <CheckBox checked={peerState.team == 0} onChange={createOnSetTeam(0)}>\n        {(peerState.team == 1 ? \"Join \" : \"\") + teamNames.get(0, \"\")}\n      </CheckBox>\n      {team1\n        .toSeq()\n        .map((peer, id) => <Text key={id}>{peer.name}</Text>)\n        .valueSeq()}\n      <CheckBox checked={peerState.team == 1} onChange={createOnSetTeam(1)}>\n        {(peerState.team == 0 ? \"Join \" : \"\") + teamNames.get(1, \"\")}\n      </CheckBox>\n      {team2\n        .toSeq()\n        .map((peer, id) => <Text key={id}>{peer.name}</Text>)\n        .valueSeq()}\n      <Button disabled={team1.isEmpty() || team2.isEmpty()} onPress={onStart}>\n        Start\n      </Button>\n    </>\n  );\n});\n","import React, { memo } from \"react\";\nimport { View } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\n\nexport const Playing = memo(() => {\n  return (\n    <View>\n      <Text>Playing</Text>\n    </View>\n  );\n});\n","import React, { memo, useMemo, useState } from \"react\";\nimport { toDataURL, QRCodeToDataURLOptions } from \"qrcode\";\nimport { Image } from \"react-native\";\n\nexport interface IQRCodeProps {\n  uri: string;\n  size?: number;\n}\n\nexport const QRCode = memo((props: IQRCodeProps) => {\n  const [dataURL, setDataURL] = useState<string | undefined>(),\n    size = props.size || 512;\n\n  useMemo(() => {\n    toDataURL(props.uri, {\n      width: size,\n      height: size,\n    } as QRCodeToDataURLOptions).then(setDataURL);\n  }, [props.uri, size]);\n\n  return (\n    <Image source={{ uri: dataURL }} style={{ width: size, height: size }} />\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { StyleSheet, View, useWindowDimensions } from \"react-native\";\nimport { makeUrl } from \"expo-linking\";\nimport { GAME_SCREEN, ParamList } from \"../../navigationConfig\";\nimport { usePeer } from \"../../peer\";\nimport { useMapStateToProps } from \"../../state\";\nimport {\n  GameState,\n  selectEveryoneDoneWithCards,\n  selectState,\n  setGameState,\n} from \"../../state/game\";\nimport { Cards } from \"./Cards\";\nimport CastButton from \"../../CastButton\";\nimport { getAppId } from \"../../id\";\nimport { Lobby } from \"./Lobby\";\nimport { Playing } from \"./Playing\";\nimport { QRCode } from \"../../QRCode\";\nimport { isLargeScreen, SMALL_WIDTH } from \"../../constants\";\n\nconst styles = StyleSheet.create({\n  qrcode: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  castButton: {\n    position: \"absolute\",\n    right: 8,\n    top: 8,\n    width: 32,\n    height: 32,\n  },\n});\n\nexport function Game(props: ParamList[typeof GAME_SCREEN]) {\n  const peer = usePeer(),\n    everyoneDoneWithCards = useMapStateToProps(selectEveryoneDoneWithCards),\n    gameState = useMapStateToProps(selectState),\n    windowDimensions = useWindowDimensions();\n\n  useMemo(() => {\n    const appPeerId = getAppId(props.id);\n\n    if (peer) {\n      if (appPeerId !== peer.getId()) {\n        try {\n          peer.connect(appPeerId);\n        } catch (_) {}\n      }\n    }\n  }, [peer, props.id]);\n\n  if (everyoneDoneWithCards && gameState !== GameState.Playing) {\n    setGameState(GameState.Playing);\n  }\n\n  return (\n    <>\n      {gameState === GameState.Lobby ? (\n        <Lobby />\n      ) : gameState === GameState.Cards ? (\n        <Cards />\n      ) : gameState === GameState.Playing ? (\n        <Playing />\n      ) : null}\n      <View style={styles.qrcode}>\n        <QRCode\n          uri={makeUrl(`/game/${props.id}`)}\n          size={\n            isLargeScreen(windowDimensions.width)\n              ? SMALL_WIDTH\n              : windowDimensions.width\n          }\n        />\n      </View>\n      <CastButton style={styles.castButton} />\n    </>\n  );\n}\n"],"sourceRoot":""}