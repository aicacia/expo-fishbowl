{"version":3,"sources":["src/peer.ts","src/id.ts","node_modules/peerjs/dist sync","src/state/game/definitions.ts","src/state/game/reducer.ts","src/state/index.ts","src/state/game/actions.ts","src/state/game/selectors.ts","src/state/game/functions.ts","src/screens/Game/Cards.tsx","src/CastButton.web.tsx","src/screens/Game/Lobby.tsx","src/screens/Game/Playing.tsx","src/QRCode.tsx","src/screens/Game/Game.tsx"],"names":["APP_PEER_ID","none","PEER","emitter","EventEmitter","getPeer","Promise","resolve","ifSome","ifNone","once","usePeer","useState","toJS","peer","setPeer","useEffect","then","usePeerId","peerId","setPeerId","a","async","getAppId","getId","appPeerId","Peer","create","PeerJS","on","error","console","replace","emit","init","CHARS","PREFIX","randomId","size","range","iter","map","charAt","Math","floor","random","length","toArray","join","id","getIdFromAppId","appId","substring","AsyncStorage","getItem","setItem","webpackEmptyContext","req","e","Error","code","keys","module","exports","Record","name","team","doneWithCards","peersFromJSON","json","Object","reduce","peers","set","peerFromJSON","Map","GameState","Card","text","cardFromJSON","cardsFromJSON","peersCards","peerCardsJSON","cards","idx","teamsFromJSON","teams","scoreFromJSON","score","Game","trust","state","Lobby","0","1","cardList","OrderedSet","peerList","fromJSON","updatePeer","updater","update","get","updateCard","index","peerCards","peerCard","deleteCard","delete","INITIAL_STATE","store","createStore","combineReducers","game","action","type","syncState","mergeDeep","rng","XorShiftRng","fromSeed","seed","shuffle","valueSeq","flat","keySeq","card","composeWithDevTools","useReduxStore","createUseReduxStore","selectState","selectPeers","selectCurrentCard","Option","from","first","selectCurrentPeer","selectTeams","selectEveryoneDoneWithCards","setGameState","broadcastAndDispatch","createGameSetStateAction","setTeamName","debounce","createGameSetTeamNameAction","setPeerName","createGameSetNameAction","setCardText","createGameSetCardTextAction","dispatch","broadcast","send","getState","message","styles","StyleSheet","flexDirection","cardInput","flex","cardButton","margin","justifyContent","Cards","memo","everyoneDoneWithCards","selectDoneWithCards","selectPeerCards","toList","cardTexts","setCardTexts","useMemo","createOnSetCardTexts","createOnDeleteCard","createGameDeleteCardAction","onAddCard","useCallback","push","onDoneWithCards","createGameSetDoneWithCardsAction","setDoneWithCards","onStart","createGameInitRoundActionAction","Date","now","Playing","View","key","style","label","value","onChangeText","status","onPress","isEmpty","CastButton","props","injectGoogleCast","window","__onGCastApiAvailable","available","reason","cast","framework","CastContext","getInstance","setOptions","receiverApplicationId","autoJoinPolicy","chrome","AutoJoinPolicy","ORIGIN_SCOPED","script","document","createElement","src","body","appendChild","peerState","setName","teamNames","setTeamNames","team1","filter","team2","createOnSetTeamName","onSetName","createOnSetTeam","createGameSetTeamAction","setPeerTeam","checked","onChange","toSeq","disabled","container","alignItems","myTurn","onCorrect","onNext","category","isSome","unwrap","QRCode","dataURL","setDataURL","toDataURL","uri","width","height","Image","source","qrcode","castButton","position","right","top","gameState","windowDimensions","useWindowDimensions","connect","_","makeUrl","isLargeScreen","SMALL_WIDTH"],"mappings":"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","file":"static/js/5.4d414792.chunk.js","sourcesContent":["import { none, Option } from \"@aicacia/core\";\nimport { Peer } from \"@aicacia/peer\";\nimport { useEffect, useState } from \"react\";\nimport { EventEmitter } from \"events\";\nimport PeerJS from \"peerjs\";\nimport { getId, getAppId } from \"./id\";\nimport { Action } from \"redux\";\n\nexport const APP_PEER_ID: Option<string> = none(),\n  PEER: Option<Peer<Action>> = none();\n\nconst emitter = new EventEmitter();\n\nexport function getPeerId() {\n  return new Promise<string>((resolve) =>\n    APP_PEER_ID.ifSome(resolve).ifNone(() => emitter.once(\"peer-id\", resolve))\n  );\n}\n\nexport function getPeer() {\n  return new Promise<Peer<Action>>((resolve) =>\n    PEER.ifSome(resolve).ifNone(() => emitter.once(\"peer\", resolve))\n  );\n}\n\nexport function usePeer() {\n  const [peer, setPeer] = useState(PEER.toJS());\n\n  useEffect(() => {\n    if (peer === null) {\n      getPeer().then(setPeer);\n    }\n  }, [peer]);\n\n  return peer;\n}\n\nexport function usePeerId() {\n  const [peerId, setPeerId] = useState(APP_PEER_ID.toJS());\n\n  useEffect(() => {\n    if (peerId === null) {\n      getPeerId().then(setPeerId);\n    }\n  }, [peerId]);\n\n  return peerId;\n}\n\nasync function init() {\n  const appPeerId = getAppId(await getId()),\n    peer = await Peer.create<Action>(new PeerJS(appPeerId));\n\n  peer.on(\"error\", (error) => {\n    console.error(error);\n  });\n\n  APP_PEER_ID.replace(appPeerId);\n  PEER.replace(peer);\n\n  emitter.emit(\"peer-id\", appPeerId);\n  emitter.emit(\"peer\", peer);\n}\n\ninit();\n","import { range } from \"@aicacia/core\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst ID_KEY = \"ID\",\n  CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  PREFIX = \"fishbowl-aicacia-com-\";\n\nfunction randomId(size = 6) {\n  return range(0, size)\n    .iter()\n    .map(() => CHARS.charAt(Math.floor(Math.random() * CHARS.length)))\n    .toArray()\n    .join(\"\");\n}\n\nexport function getAppId(id: string) {\n  return PREFIX + id;\n}\n\nexport function getIdFromAppId(appId: string) {\n  return appId.substring(PREFIX.length);\n}\n\nexport async function getId(size = 6) {\n  let id = await AsyncStorage.getItem(ID_KEY);\n\n  if (id) {\n    return id;\n  } else {\n    id = randomId(size);\n    await AsyncStorage.setItem(ID_KEY, id);\n    return id;\n  }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 924;","import { IJSONObject } from \"@aicacia/json\";\nimport { OrderedSet, Map, Record, RecordOf } from \"immutable\";\n\nexport interface IPeer {\n  name: string;\n  team: number;\n  doneWithCards: boolean;\n}\n\nexport const Peer = Record<IPeer>({\n  name: \"\",\n  team: 0,\n  doneWithCards: false,\n});\n\nexport function peerFromJSON(json: IJSONObject): RecordOf<IPeer> {\n  return Peer({\n    name: json.name as string,\n    team: json.team as number,\n  });\n}\n\nexport function peersFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (peers, id) => peers.set(id, peerFromJSON(json[id] as IJSONObject)),\n    Map<string, RecordOf<IPeer>>()\n  );\n}\n\nexport interface ICard {\n  text: string;\n}\n\nexport const Card = Record<ICard>({\n  text: \"\",\n});\n\nexport function cardFromJSON(json: IJSONObject): RecordOf<ICard> {\n  return Card({\n    text: json.text as string,\n  });\n}\n\nexport function cardsFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce((peersCards, id) => {\n    const peerCardsJSON = json[id] as IJSONObject;\n    return peersCards.set(\n      id,\n      Object.keys(peerCardsJSON).reduce(\n        (cards, idx) =>\n          cards.set(+idx, cardFromJSON(peerCardsJSON[idx] as IJSONObject)),\n        Map<number, RecordOf<ICard>>()\n      )\n    );\n  }, Map<string, Map<number, RecordOf<ICard>>>());\n}\n\nexport function teamsFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (teams, team) => teams.set(+team, json[team] as string),\n    Map<number, string>()\n  );\n}\n\nexport function scoreFromJSON(json: IJSONObject) {\n  return Object.keys(json).reduce(\n    (score, team) => score.set(+team, json[team] as number),\n    Map<number, number>()\n  );\n}\n\nexport enum GameState {\n  Lobby,\n  Cards,\n  Playing,\n  Done,\n}\n\nexport interface IGame {\n  trust: number;\n  state: GameState;\n  peers: Map<string, RecordOf<IPeer>>;\n  teams: Map<number, string>;\n  cards: Map<string, Map<number, RecordOf<ICard>>>;\n  cardList: OrderedSet<RecordOf<ICard>>;\n  peerList: OrderedSet<string>;\n  score: Map<number, number>;\n}\n\nexport const Game = Record<IGame>({\n  trust: 0,\n  state: GameState.Lobby,\n  peers: Map(),\n  teams: teamsFromJSON({ 0: \"Team 1\", 1: \"Team 2\" }),\n  cards: Map(),\n  cardList: OrderedSet(),\n  peerList: OrderedSet(),\n  score: scoreFromJSON({ 0: 0, 1: 0 }),\n});\n\nexport function fromJSON(json: IJSONObject): RecordOf<IGame> {\n  return Game({\n    trust: json.trust as number,\n    state: json.state as GameState,\n    peers: peersFromJSON(json.peers as IJSONObject),\n    teams: teamsFromJSON(json.teams as IJSONObject),\n    cards: cardsFromJSON(json.cards as IJSONObject),\n    cardList: OrderedSet(\n      (json.cardList as Array<IJSONObject>).map(cardFromJSON)\n    ),\n    peerList: OrderedSet(json.peerList as Array<string>),\n    score: scoreFromJSON(json.cards as IJSONObject),\n  });\n}\n","import { Map, RecordOf, OrderedSet } from \"immutable\";\nimport { XorShiftRng } from \"@aicacia/rand\";\nimport { IGame, IPeer, ICard, Peer, Card, fromJSON, Game } from \"./definitions\";\nimport {\n  GAME_DELETE_CARD,\n  GAME_SET_CARD_TEXT,\n  GAME_SET_DONE_WITH_CARDS,\n  GAME_SET_NAME,\n  GAME_SET_STATE,\n  GAME_SET_TEAM,\n  GAME_SET_TEAM_NAME,\n  GAME_INIT_ROUND,\n  GAME_SYNC,\n  GAME_TRUST,\n  IGameAction,\n} from \"./actions\";\n\nfunction updatePeer(\n  state: RecordOf<IGame>,\n  id: string,\n  updater: (peer: RecordOf<IPeer>) => RecordOf<IPeer>\n) {\n  return state.update(\"peers\", (peers) =>\n    peers.set(id, updater(peers.get(id) || Peer()))\n  );\n}\n\nfunction updateCard(\n  state: RecordOf<IGame>,\n  peerId: string,\n  index: number,\n  updater: (peer: RecordOf<ICard>) => RecordOf<ICard>\n) {\n  return state.update(\"cards\", (cards) => {\n    const peerCards = cards.get(peerId, Map<number, RecordOf<ICard>>()),\n      peerCard = peerCards.get(index, Card());\n\n    return cards.set(peerId, peerCards.set(index, updater(peerCard)));\n  });\n}\n\nfunction deleteCard(state: RecordOf<IGame>, peerId: string, index: number) {\n  return state.update(\"cards\", (cards) => {\n    const peerCards = cards.get(peerId, Map<number, RecordOf<ICard>>());\n    return cards.set(peerId, peerCards.delete(index));\n  });\n}\n\n// export const INITIAL_STATE = fromJSON({\n//   state: GameState.Playing,\n//   peers: {\n//     \"fishbowl-aicacia-com-UKLIZG3\": {\n//       name: \"UKLIZG3\",\n//       team: 0,\n//       doneWithCards: true,\n//     },\n//     \"fishbowl-aicacia-com-ETJF82J\": {\n//       name: \"ETJF82J\",\n//       team: 1,\n//       doneWithCards: true,\n//     },\n//   },\n//   teams: {\n//     \"0\": \"Team 1\",\n//     \"1\": \"Team 2\",\n//   },\n//   cards: {\n//     \"fishbowl-aicacia-com-UKLIZG3\": {\n//       \"0\": {\n//         text: \"Billy\",\n//       },\n//       \"1\": {\n//         text: \"Balls\",\n//       },\n//     },\n//     \"fishbowl-aicacia-com-ETJF82J\": {\n//       \"0\": {\n//         text: \"Bob\",\n//       },\n//       \"1\": {\n//         text: \"James Gun\",\n//       },\n//     },\n//   },\n//   cardList: [\n//     {\n//       text: \"Billy\",\n//     },\n//     {\n//       text: \"Balls\",\n//     },\n//     {\n//       text: \"Bob\",\n//     },\n//     {\n//       text: \"James Gun\",\n//     },\n//   ],\n//   peerList: [\"fishbowl-aicacia-com-ETJF82J\", \"fishbowl-aicacia-com-UKLIZG3\"],\n//   score: {\n//     \"0\": 0,\n//     \"1\": 0,\n//   },\n// });\nexport const INITIAL_STATE = Game();\n\nexport function reducer(\n  state = INITIAL_STATE,\n  action: IGameAction\n): RecordOf<IGame> {\n  switch (action.type) {\n    case GAME_SET_NAME:\n      return updatePeer(state, action.peerId, (peer) =>\n        peer.set(\"name\", action.name)\n      );\n    case GAME_SET_TEAM:\n      return updatePeer(state, action.peerId, (peer) =>\n        peer.set(\"team\", action.team)\n      );\n    case GAME_SET_TEAM_NAME:\n      return state.update(\"teams\", (teams) =>\n        teams.set(action.team, action.name)\n      );\n    case GAME_SYNC:\n      const syncState = fromJSON(action.state);\n\n      if (syncState.trust > state.trust) {\n        return state.mergeDeep(syncState);\n      } else {\n        return syncState.mergeDeep(state);\n      }\n    case GAME_SET_STATE:\n      return state.set(\"state\", action.state);\n    case GAME_INIT_ROUND:\n      const rng = XorShiftRng.fromSeed(action.seed);\n      return state\n        .set(\n          \"cardList\",\n          OrderedSet(\n            rng.shuffle(\n              state.cards\n                .map((peerCards) => peerCards.valueSeq().toArray())\n                .valueSeq()\n                .toArray()\n                .flat()\n            )\n          )\n        )\n        .set(\n          \"peerList\",\n          OrderedSet(rng.shuffle(state.peers.keySeq().toArray()))\n        );\n    case GAME_SET_CARD_TEXT:\n      return updateCard(state, action.peerId, action.index, (card) =>\n        card.set(\"text\", action.text)\n      );\n    case GAME_SET_DONE_WITH_CARDS:\n      return updatePeer(state, action.peerId, (peer) =>\n        peer.set(\"doneWithCards\", action.doneWithCards)\n      );\n    case GAME_DELETE_CARD:\n      return deleteCard(state, action.peerId, action.index);\n    case GAME_TRUST:\n      return state.update(\"trust\", (trust) => trust + 1);\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport { createUseReduxStore } from \"@aicacia/use-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { reducer as gameReducer } from \"./game/reducer\";\n\nexport const store = createStore(\n  combineReducers({\n    game: gameReducer,\n  }),\n  composeWithDevTools()\n);\n\nexport type IState = ReturnType<typeof store[\"getState\"]>;\n\nexport const useReduxStore = createUseReduxStore(store);\n","import { Action } from \"redux\";\nimport { IJSONObject } from \"@aicacia/json\";\nimport { GameState } from \"./definitions\";\n\nexport const GAME_TRUST = \"game.trust\";\n\nexport interface IGameTrustAction extends Action<typeof GAME_TRUST> {}\n\nexport function createGameTrustAction(): IGameTrustAction {\n  return {\n    type: GAME_TRUST,\n  };\n}\n\nexport const GAME_SYNC = \"game.sync\";\n\nexport interface IGameSyncAction extends Action<typeof GAME_SYNC> {\n  from: string;\n  state: IJSONObject;\n}\n\nexport function createGameSyncAction(\n  from: string,\n  state: IJSONObject\n): IGameSyncAction {\n  return {\n    type: GAME_SYNC,\n    from,\n    state,\n  };\n}\n\nexport const GAME_SET_STATE = \"game.set-state\";\n\nexport interface IGameSetStateAction extends Action<typeof GAME_SET_STATE> {\n  state: GameState;\n}\n\nexport function createGameSetStateAction(\n  state: GameState\n): IGameSetStateAction {\n  return {\n    type: GAME_SET_STATE,\n    state,\n  };\n}\n\nexport const GAME_INIT_ROUND = \"game.init-round\";\n\nexport interface IGameInitRoundAction extends Action<typeof GAME_INIT_ROUND> {\n  seed: number;\n}\n\nexport function createGameInitRoundActionAction(\n  seed: number\n): IGameInitRoundAction {\n  return {\n    type: GAME_INIT_ROUND,\n    seed,\n  };\n}\n\nexport const GAME_SET_NAME = \"game.set-name\";\n\nexport interface IGameSetNameAction extends Action<typeof GAME_SET_NAME> {\n  peerId: string;\n  name: string;\n}\n\nexport function createGameSetNameAction(\n  peerId: string,\n  name: string\n): IGameSetNameAction {\n  return {\n    type: GAME_SET_NAME,\n    peerId,\n    name,\n  };\n}\n\nexport const GAME_SET_TEAM = \"game.set-team\";\n\nexport interface IGameSetTeamAction extends Action<typeof GAME_SET_TEAM> {\n  peerId: string;\n  team: number;\n}\n\nexport function createGameSetTeamAction(\n  peerId: string,\n  team: number\n): IGameSetTeamAction {\n  return {\n    type: GAME_SET_TEAM,\n    peerId,\n    team,\n  };\n}\n\nexport const GAME_SET_TEAM_NAME = \"game.set-team-name\";\n\nexport interface IGameSetTeamNameAction\n  extends Action<typeof GAME_SET_TEAM_NAME> {\n  team: number;\n  name: string;\n}\n\nexport function createGameSetTeamNameAction(\n  team: number,\n  name: string\n): IGameSetTeamNameAction {\n  return {\n    type: GAME_SET_TEAM_NAME,\n    name,\n    team,\n  };\n}\n\nexport const GAME_SET_CARD_TEXT = \"game.set-card-text\";\n\nexport interface IGameSetCardTextAction\n  extends Action<typeof GAME_SET_CARD_TEXT> {\n  peerId: string;\n  index: number;\n  text: string;\n}\n\nexport function createGameSetCardTextAction(\n  peerId: string,\n  index: number,\n  text: string\n): IGameSetCardTextAction {\n  return {\n    type: GAME_SET_CARD_TEXT,\n    peerId,\n    index,\n    text,\n  };\n}\n\nexport const GAME_DELETE_CARD = \"game.delete-card\";\n\nexport interface IGameDeleteCardAction extends Action<typeof GAME_DELETE_CARD> {\n  peerId: string;\n  index: number;\n}\n\nexport function createGameDeleteCardAction(\n  peerId: string,\n  index: number\n): IGameDeleteCardAction {\n  return {\n    type: GAME_DELETE_CARD,\n    peerId,\n    index,\n  };\n}\n\nexport const GAME_SET_DONE_WITH_CARDS = \"game.set-done-with-cards\";\n\nexport interface IGameGameSetDoneWithCardsAction\n  extends Action<typeof GAME_SET_DONE_WITH_CARDS> {\n  peerId: string;\n  doneWithCards: boolean;\n}\n\nexport function createGameSetDoneWithCardsAction(\n  peerId: string,\n  doneWithCards: boolean\n): IGameGameSetDoneWithCardsAction {\n  return {\n    type: GAME_SET_DONE_WITH_CARDS,\n    peerId,\n    doneWithCards,\n  };\n}\n\nexport type IGameAction =\n  | IGameTrustAction\n  | IGameSyncAction\n  | IGameGameSetDoneWithCardsAction\n  | IGameDeleteCardAction\n  | IGameSetCardTextAction\n  | IGameSetNameAction\n  | IGameSetTeamNameAction\n  | IGameInitRoundAction\n  | IGameSetStateAction\n  | IGameSetTeamAction;\n","import { IState } from \"..\";\nimport { Map, List, RecordOf } from \"immutable\";\nimport { IPeer, Peer, GameState, ICard } from \"./definitions\";\nimport { Option } from \"@aicacia/core\";\n\nexport function selectState(state: IState): GameState {\n  return state.game.state;\n}\n\nexport function selectPeers(state: IState): Map<string, RecordOf<IPeer>> {\n  return state.game.peers;\n}\nexport function selectPeer(state: IState, id: string): RecordOf<IPeer> {\n  return state.game.peers.get(id, Peer());\n}\n\nexport function selectCurrentCard(state: IState): Option<RecordOf<ICard>> {\n  return Option.from(state.game.cardList.first());\n}\n\nexport function selectCurrentPeer(state: IState) {\n  return state.game.peerList.first();\n}\n\nexport function selectTeams(state: IState): Map<number, string> {\n  return state.game.teams;\n}\n\nexport function selectPeerCards(\n  state: IState,\n  id: string\n): Map<number, RecordOf<ICard>> {\n  return state.game.cards.get(id, Map());\n}\n\nexport function selectCards(state: IState): List<RecordOf<ICard>> {\n  return state.game.cards.reduce(\n    (cards, peerCards) => cards.merge(peerCards.toList()),\n    List()\n  );\n}\n\nexport function selectDoneWithCards(state: IState, peerId: string): boolean {\n  return state.game.peers.get(peerId, Peer()).doneWithCards;\n}\n\nexport function selectEveryoneDoneWithCards(state: IState): boolean {\n  const peers = state.game.peers.valueSeq().toArray();\n\n  if (!peers.length) {\n    return false;\n  }\n\n  for (const peer of peers) {\n    if (!peer.doneWithCards) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { debounce } from \"@aicacia/debounce\";\nimport {\n  createGameSyncAction,\n  createGameDeleteCardAction,\n  createGameSetDoneWithCardsAction,\n  createGameSetCardTextAction,\n  createGameSetNameAction,\n  createGameSetStateAction,\n  createGameSetTeamAction,\n  createGameSetTeamNameAction,\n  createGameInitRoundActionAction,\n  IGameAction,\n  createGameTrustAction,\n} from \"./actions\";\nimport { GameState } from \"./definitions\";\nimport { store } from \"..\";\nimport { getPeer } from \"../../peer\";\nimport { getIdFromAppId } from \"../../id\";\n\nexport function setGameState(state: GameState) {\n  broadcastAndDispatch(createGameSetStateAction(state));\n}\n\nexport function initRound(seed: number) {\n  broadcastAndDispatch(createGameInitRoundActionAction(seed));\n}\n\nexport const setTeamName = debounce((team: number, name: string) => {\n  broadcastAndDispatch(createGameSetTeamNameAction(team, name));\n}, 1000);\n\nexport const setPeerName = debounce((peerId: string, name: string) => {\n  broadcastAndDispatch(createGameSetNameAction(peerId, name));\n}, 1000);\n\nexport function setPeerTeam(id: string, team: number) {\n  broadcastAndDispatch(createGameSetTeamAction(id, team));\n}\n\nexport const setCardText = debounce(\n  (peerId: string, index: number, text: string) => {\n    broadcastAndDispatch(createGameSetCardTextAction(peerId, index, text));\n  },\n  1000\n);\n\nexport function deleteCard(peerId: string, index: number) {\n  broadcastAndDispatch(createGameDeleteCardAction(peerId, index));\n}\n\nexport function setDoneWithCards(peerId: string, doneWithCards: boolean) {\n  broadcastAndDispatch(createGameSetDoneWithCardsAction(peerId, doneWithCards));\n}\n\nfunction broadcastAndDispatch(action: IGameAction) {\n  store.dispatch(action);\n  getPeer().then((peer) => peer.broadcast(action));\n}\n\ngetPeer().then((peer) => {\n  setPeerName(peer.getId(), getIdFromAppId(peer.getId()));\n\n  peer.on(\"connection\", (id) => {\n    peer.send(\n      id,\n      createGameSyncAction(peer.getId(), store.getState().game.toJS() as any)\n    );\n  });\n\n  peer.on(\"message\", (message) => {\n    store.dispatch(message);\n    store.dispatch(createGameTrustAction());\n  });\n});\n","import { Button, Input } from \"@ui-kitten/components\";\nimport React, { memo, useCallback, useMemo, useState } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { usePeerId } from \"../../peer\";\nimport { useReduxStore } from \"../../state\";\nimport { GameState } from \"../../state/game/definitions\";\nimport {\n  setCardText,\n  setDoneWithCards,\n  deleteCard,\n  setGameState,\n  initRound,\n} from \"../../state/game/functions\";\nimport {\n  selectDoneWithCards,\n  selectEveryoneDoneWithCards,\n  selectPeerCards,\n} from \"../../state/game/selectors\";\n\nconst styles = StyleSheet.create({\n  card: {\n    flexDirection: \"row\",\n  },\n  cardInput: {\n    flex: 11,\n  },\n  cardButton: {\n    flex: 1,\n    margin: 16,\n    justifyContent: \"center\",\n  },\n});\n\nexport const Cards = memo(() => {\n  const peerId = usePeerId(),\n    everyoneDoneWithCards = useReduxStore(selectEveryoneDoneWithCards),\n    doneWithCards = useReduxStore((state) =>\n      selectDoneWithCards(state, peerId || \"\")\n    ),\n    cards = useReduxStore((state) => selectPeerCards(state, peerId || \"\")),\n    [cardTexts, setCardTexts] = useState(() =>\n      cards.map((card) => card.text).toList()\n    );\n\n  useMemo(\n    () =>\n      setCardTexts((cardTexts) =>\n        cards.reduce(\n          (cardTexts, card, index) => cardTexts.set(index, card.text),\n          cardTexts\n        )\n      ),\n    [cards]\n  );\n\n  const createOnSetCardTexts = (index: number) => (text: string) => {\n    if (peerId) {\n      setCardText(peerId, index, text);\n    }\n    setCardTexts((cardTexts) => cardTexts.set(index, text));\n  };\n\n  const createOnDeleteCard = (index: number) => () => {\n    if (peerId) {\n      deleteCard(peerId, index);\n    }\n    setCardTexts((cardTexts) => cardTexts.delete(index));\n  };\n\n  const onAddCard = useCallback(\n    () => setCardTexts((cardTexts) => cardTexts.push(\"\")),\n    []\n  );\n\n  const onDoneWithCards = useCallback(\n    () => peerId && setDoneWithCards(peerId, true),\n    [peerId]\n  );\n\n  const onStart = useCallback(() => {\n    if (peerId) {\n      initRound(Date.now());\n      setGameState(GameState.Playing);\n    }\n  }, [peerId]);\n\n  return (\n    <View>\n      {cardTexts.valueSeq().map((text, index) => (\n        <View key={index} style={styles.card}>\n          <Input\n            style={styles.cardInput}\n            label={`Card ${index + 1}`}\n            value={text}\n            onChangeText={createOnSetCardTexts(index)}\n          />\n          <View style={styles.cardButton}>\n            <Button status=\"danger\" onPress={createOnDeleteCard(index)}>\n              Delete\n            </Button>\n          </View>\n        </View>\n      ))}\n      <Button onPress={onAddCard}>Add Card</Button>\n      {!doneWithCards && !cards.isEmpty() && (\n        <Button onPress={onDoneWithCards}>Ready</Button>\n      )}\n      {everyoneDoneWithCards && <Button onPress={onStart}>Start</Button>}\n    </View>\n  );\n});\n","import React from \"react\";\nimport once from \"once\";\nimport { View } from \"react-native\";\nimport { Props } from \"react-native-google-cast/lib/typescript/src/components/CastButton\";\nimport { receiverApplicationId } from \"../app.json\";\n\nexport default function CastButton(props: Props) {\n  const GoogleCastLancher: any = \"google-cast-launcher\";\n\n  injectGoogleCast();\n\n  return (\n    <View {...props}>\n      <GoogleCastLancher />\n    </View>\n  );\n}\n\nconst injectGoogleCast = once(() => {\n  const onGCastApiAvailable = (available: boolean, reason: string) => {\n    if (available) {\n      cast.framework.CastContext.getInstance().setOptions({\n        receiverApplicationId,\n        autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n      });\n    } else {\n      console.error(reason);\n    }\n  };\n\n  window.__onGCastApiAvailable = onGCastApiAvailable as (\n    available: boolean\n  ) => void;\n\n  const script = document.createElement(\"script\");\n  script.src =\n    \"//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n  document.body.appendChild(script);\n});\n","import React, { memo, useCallback, useMemo, useState } from \"react\";\nimport { Button, CheckBox, Divider, Input, Text } from \"@ui-kitten/components\";\nimport { usePeer } from \"../../peer\";\nimport { useReduxStore } from \"../../state\";\nimport { Peer, GameState } from \"../../state/game/definitions\";\nimport {\n  setPeerName,\n  setPeerTeam,\n  setTeamName,\n  setGameState,\n} from \"../../state/game/functions\";\nimport { selectPeers, selectTeams } from \"../../state/game/selectors\";\n\nexport const Lobby = memo(() => {\n  const peer = usePeer(),\n    peers = useReduxStore(selectPeers),\n    teams = useReduxStore(selectTeams),\n    peerState = peers.get(peer ? peer.getId() : \"\", Peer()),\n    [name, setName] = useState(peerState.name),\n    [teamNames, setTeamNames] = useState(teams),\n    team1 = peers.filter((peer) => peer.team === 0).toList(),\n    team2 = peers.filter((peer) => peer.team === 1).toList();\n\n  useMemo(() => setTeamNames(teams), [teams]);\n\n  const createOnSetTeamName = useCallback(\n    (team: number) => (name: string) => {\n      if (peer) {\n        setTeamName(team, name);\n        setTeamNames((teamNames) => teamNames.set(team, name));\n      }\n    },\n    [peer]\n  );\n\n  const onSetName = useCallback(\n    (name: string) => {\n      if (peer) {\n        setPeerName(peer.getId(), name);\n        setName(name);\n      }\n    },\n    [peer]\n  );\n\n  const createOnSetTeam = useCallback(\n    (team: number) => () => {\n      if (peer) {\n        setPeerTeam(peer.getId(), team);\n      }\n    },\n    [peer]\n  );\n\n  const onStart = useCallback(() => setGameState(GameState.Cards), []);\n\n  return (\n    <>\n      <Input label=\"Your Name\" value={name} onChangeText={onSetName} />\n      <Input\n        label=\"Team 1 Name\"\n        value={teamNames.get(0, \"\")}\n        onChangeText={createOnSetTeamName(0)}\n      />\n      <Input\n        label=\"Team 2 Name\"\n        value={teamNames.get(1, \"\")}\n        onChangeText={createOnSetTeamName(1)}\n      />\n      <Divider />\n      <CheckBox checked={peerState.team == 0} onChange={createOnSetTeam(0)}>\n        {(peerState.team == 1 ? \"Join \" : \"\") + teamNames.get(0, \"\")}\n      </CheckBox>\n      {team1\n        .toSeq()\n        .map((peer, id) => <Text key={id}>{peer.name}</Text>)\n        .valueSeq()}\n      <CheckBox checked={peerState.team == 1} onChange={createOnSetTeam(1)}>\n        {(peerState.team == 0 ? \"Join \" : \"\") + teamNames.get(1, \"\")}\n      </CheckBox>\n      {team2\n        .toSeq()\n        .map((peer, id) => <Text key={id}>{peer.name}</Text>)\n        .valueSeq()}\n      <Button disabled={team1.isEmpty() || team2.isEmpty()} onPress={onStart}>\n        Start\n      </Button>\n    </>\n  );\n});\n","import React, { memo, useCallback } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Button, Text } from \"@ui-kitten/components\";\nimport { useReduxStore } from \"../../state\";\nimport {\n  selectCurrentCard,\n  selectCurrentPeer,\n} from \"../../state/game/selectors\";\nimport { usePeerId } from \"../../peer\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n});\n\nexport const Playing = memo(() => {\n  const peerId = usePeerId(),\n    card = useReduxStore(selectCurrentCard),\n    currentPeer = useReduxStore(selectCurrentPeer),\n    myTurn = peerId === currentPeer;\n\n  const onCorrect = useCallback(() => null, []);\n  const onNext = useCallback(() => null, []);\n\n  return (\n    <View style={styles.container}>\n      {myTurn && (\n        <>\n          <Text category=\"h3\">Your Turn</Text>\n          {card.isSome() && <Text category=\"h1\">{card.unwrap().text}</Text>}\n          <Button status=\"success\" onPress={onCorrect}>\n            Correct\n          </Button>\n          <Button status=\"danger\" onPress={onNext}>\n            Next\n          </Button>\n        </>\n      )}\n    </View>\n  );\n});\n","import React, { memo, useMemo, useState } from \"react\";\nimport { toDataURL, QRCodeToDataURLOptions } from \"qrcode\";\nimport { Image } from \"react-native\";\n\nexport interface IQRCodeProps {\n  uri: string;\n  size?: number;\n}\n\nexport const QRCode = memo((props: IQRCodeProps) => {\n  const [dataURL, setDataURL] = useState<string | undefined>(),\n    size = props.size || 512;\n\n  useMemo(() => {\n    toDataURL(props.uri, {\n      width: size,\n      height: size,\n    } as QRCodeToDataURLOptions).then(setDataURL);\n  }, [props.uri, size]);\n\n  return (\n    <Image source={{ uri: dataURL }} style={{ width: size, height: size }} />\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { StyleSheet, View, useWindowDimensions } from \"react-native\";\nimport { makeUrl } from \"expo-linking\";\nimport { GAME_SCREEN, ParamList } from \"../../navigationConfig\";\nimport { usePeer } from \"../../peer\";\nimport { useReduxStore } from \"../../state\";\nimport { selectState } from \"../../state/game/selectors\";\nimport { GameState } from \"../../state/game/definitions\";\nimport { Cards } from \"./Cards\";\nimport CastButton from \"../../CastButton\";\nimport { getAppId } from \"../../id\";\nimport { Lobby } from \"./Lobby\";\nimport { Playing } from \"./Playing\";\nimport { QRCode } from \"../../QRCode\";\nimport { isLargeScreen, SMALL_WIDTH } from \"../../constants\";\n\nconst styles = StyleSheet.create({\n  qrcode: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  castButton: {\n    position: \"absolute\",\n    right: 8,\n    top: 8,\n    width: 32,\n    height: 32,\n  },\n});\n\nexport function Game(props: ParamList[typeof GAME_SCREEN]) {\n  const peer = usePeer(),\n    gameState = useReduxStore(selectState),\n    windowDimensions = useWindowDimensions();\n\n  useMemo(() => {\n    const appPeerId = getAppId(props.id);\n\n    if (peer) {\n      if (appPeerId !== peer.getId()) {\n        try {\n          peer.connect(appPeerId);\n        } catch (_) {}\n      }\n    }\n  }, [peer, props.id]);\n\n  return (\n    <>\n      {gameState === GameState.Lobby ? (\n        <Lobby />\n      ) : gameState === GameState.Cards ? (\n        <Cards />\n      ) : gameState === GameState.Playing ? (\n        <Playing />\n      ) : null}\n      {gameState < GameState.Playing && (\n        <View style={styles.qrcode}>\n          <QRCode\n            uri={makeUrl(`/game/${props.id}`)}\n            size={\n              isLargeScreen(windowDimensions.width)\n                ? SMALL_WIDTH\n                : windowDimensions.width\n            }\n          />\n        </View>\n      )}\n      <CastButton style={styles.castButton} />\n    </>\n  );\n}\n"],"sourceRoot":""}